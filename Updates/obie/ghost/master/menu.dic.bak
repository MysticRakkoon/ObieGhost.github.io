//---------------------------Menus--------------------------
OpenSakuraMenu //menu open dialogue
{
		"\0\s[0]\b2'Yes %(username)?'"
		"\0\s[2]\b2'.....?'"
		"\0\s[2]\b2'Something you need me to aid you in %(username)?'"
		"\0\s[1]\b2'Yes?'"
		--
		MenuRun
}


MenuRun : all //menu functions
 {	
 	wd = GetWeekDay
 	ap = GetAP
	--
	"\_q\b2\n\n* You ask Obie to....*\n\n[half]" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue. You can ignore it.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[..repeat itself?,OnLastTalk]\n"
	}
	--
 	"\![*]\q[..say something to you?,OnAiTalk]\n\n[half]"
	--
	"\n\q * Or instead you to want to... *\n\n[half]"
	//"\![*]\q[..say something to another ghost?,OnAiTalk]\n\n[half]" 
	//uncomment this when adding stuff for it to talk to other ghosts with 
	
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, 
	//as long as you separate it from the other options into its own section with two dashes above and below. 
	//Note that you can't do this if the Function above has ": all" after it, since that will put every potential option in. You'll have to set it your menu up differently to take --s into account. 
	//I commented it out here because of ": all" above, but you can see the basic idea.
	--
	"\![*]\q[..change settings?,configmenu]\n"
	"\![*]\q[..use functions?,dosomething]\n\n[half]"
	
 	"\n\![*]\q[Change your mind.,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
}
	  //*********************Advanced User Info*******************************  
	  //I briefly touched in bootend.dic about \q, but I'll again cover it here. Pay very close attention to how this bit of dialogue is formatted. 
	  //You'll see it goes \![*]\q[Displayed Name,linkedfunction]. Breaking it down, \![*] puts the balloon's option icon in front of the choice (usually a > or something), \q sets up the choice, 
	  //Displayed Name which is the text that will display in the ghost's balloon, then linkedfunction, which is what the choice is linked to when the user clicks it. 
	  //As you go through this file, look at how every menu option is set up, and you will see they all follow this format, give or take a \![*]. 
	  //***********************************************************************


//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

nowhour
{
	if hour12 == 0; "1"
	else; "%(hour12)"
}

nowmin
{
	if minute >= 0 && minute <=9; "0%(minute)"
	else; "%(minute)"
}


//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, 
//they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}

//*********************Advanced User Info*******************************
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though (Like "Do you like going to raves and partying? Yes/No"). Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You can restructure how this looks if you want, but it's perfectly functional as is. 

TalkConfig : all
{
	"\0\b[2]\_q\" 
	//This bit of dialogue sets up a large balloon and a quick session, like above, so all the text will appear immediately. 
	//The rest is formatted to display the information and options to change it. I wouldn't touch any of it if you don't know what you're doing.
	//I'll briefly explain the font tags I used here. \f[bold,1] turns bold on, \f[bold,0] turns it off, not unlike a <b> tag. 
	//\f[sup,1] turns superscript on (making it tiny and above the text) and \f[sup,0] turns it off. I touch on these tags in the walkthrough on SakuraScript.
	
	"f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Rename?,TEACHNAME])\f[sup,0]\n"
	
	
	//If you want your user to set their pronouns, you can uncomment this menu option by removing the two slashes in front. Read more on the walkthrough about commenting.
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change?,TEACHPRONOUN])\f[sup,0]\n"
	
	
	//If you want your user to be able to set their birthday, you can uncomment this menu option.
	"\n\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change?,TEACHBDAY])\f[sup,0]\n"
	
	
	"\n\f[bold,1]Talking Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change?,talkinter])\f[sup,0]\n\n"
	
		{
		"\![*]\f[bold,1]Enable Uninstall option? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
		}
		
	"\![*]\q[Nevermind,BACKTOMENU]\e"
}



//-----PRONOUNS-----------------------------------------------------------------

//This and the next few set up the pronouns, as you can see by the linkedfunction names. leave the rest of it alone.

Select.TEACHPRONOUN : all
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q"
	"\![*]\q[He-His-Him,choicemasc]\n"
	"\![*]\q[She-Her-Her,choicefem]\n"	
	"\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[2]'I will call you by he, him and his.'\e"
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]'I will call you by she, her and hers.'\e"
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]'I will call you by they, them and theirs.'\e"
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."



//-----Ghost Deletion---------------------------------------------------------------------------------------------------------------------------

//These two options toggle whether or not you can delete your ghost. Leave them alone.
Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}



//----Birthday------------------------------------------------------------------------------------------------------------------------------------------------
//This next set of functions handles inputting the user's birthday. 

Select.TEACHBDAY
	{	
		"\0\s[5]'What month were you born? \w8The name or number is fine.'\![open,inputbox,OnUserBornMonth,-1]\e"
				
		//*********************Advanced User Info*******************************
		//I also touched on this in bootend.dic and explained it in the walkthrough page on coding, but I'll also go into it here. 
		//I'm going to break down the tag there at the end of the sentence so you know what it's doing. 
		//Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, 
		//and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. 
		//If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. 
		//This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it. 
OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\0\s[2]That's not a valid month. Try again."
			"\0%(angrypose)'Try again."
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
	}
	--
	//If it's a valid month
	"\0\s[2]'So you were born in %(bornmonthprint).'\n\w8'What day was it?'"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
	//Here you can see the use of a bornmonthprint envelope to show the user what month they put in. 
	//Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue in the first line just as with above.
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay-------------------------------------------------------------------
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it. 
//Again, there'll be comments explaining how it works, but all you really need to do is change the dialogue appropriately. 

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\0\s[7]That's not a valid day. Try again."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked---------------------------------------------------------------------------------------------------------
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\0\s[0]'It's your day of creation.'\w8\s[2]'Happy birthday, %(username)!'\e"
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[5]'You were born on Christmas? Wow.'\w8\w8\n\s[2]'Happy birthday, %(username).'\e"
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint). I'll remember.\e"
			//note the use of envelopes to display the newly set birthday properly. 
			//You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
		}
}


//--------------------------------------------------------------------------------------------------------------------------
//--Talk Rate---------------------------------------------------------------------------------------------------------------
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter : all
 	{
 		"\0\s[0]\b2'How often should I speak?'\w8\n'The rate is set for every %(talktime).'"
 		"\0\n\n[half]"
 		"\![*]\q[Every 30 seconds,TALKMAX]\n"
		"\![*]\q[Every minute,TALKHIGH]\n"
 		"\![*]\q[Every 3 minutes,TALKNORMAL]\n"
		"\![*]\q[Every 5 minutes,TALKPOOR]\n"
		"\![*]\q[Every 30 minutes,TALKHALFHOUR]\n"
		"\![*]\q[Every hour,TALKHOURLY]\n"
 		"\![*]\q[Don't speak,TALKNONE]\n\n[half]"
		"\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate.
Select.TalksTill
	{
		"\0\s[2]'Okay, I'll keep you company like how I have been.'\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[2]'I will speak every 30 seconds.'\s[12]\n\n[half]*(Am I happy %(username) wants me to talk more?\w8 Or annoyed that I have to figure out what to say for every thirty seconds..)*\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[2]'I will speak every minute.'\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[12]'I will speak every three minutes.'\e"
	}

//If the user chooses every five minutes.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\0\s[11]'I will speak every five minutes.'\e"
	}

//If the user chooses every thirty minutes.THIS IS THE DEFAULT
Select.TALKHALFHOUR
	{
 		talktime = "30 minutes"
		aitalkinterval = 1800
		
 		"\0\s[2]'I will speak every thirty minutes.'\e"
	}
	
//If the user chooses every hour.
Select.TALKHOURLY
	{
 		talktime = "60 minutes"
		aitalkinterval = 3600
		
 		"\0\s[1]'I will speak every hour.'\e"
	}

//If the user chooses to not have them speak. 
//This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. 
//Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "...you asked me not to speak..."
		aitalkinterval = 0
		
		"\0\s[11]I will not speak.\e"
	}


//---------CHANGE NAME-----------------------------------------------------------------------------------------------------------------------
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

//--------cancel----------------------------------------------------------------------------------------------------------------------------------------
//If the user selects cancel in a menu.
Select.CANCEL
	{
		"\0\s[2]'..Okay??'\e"
		"\0\s[2]'Hmm\w2.\w2.\w2. Okay.'\s[0]\e"
		"\0\s[2]'Mmm.'\e"
 	}

	
//In the MenuRun function above, if someone selects Functions (linked to dosomething), it will take them here to Select.dosomething.

//If you want to have your ghost pick from multiple intro lines for this menu, you can uncomment FunctionMenuIntros here, and add in dialogue as you like.

// FunctionMenuIntros : nonoverlap
// {	
		// //I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
		// //If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue below as you like, but note that they don't end with \e here.
		
		// "\0\s[0]\b2This is the first function menu intro.\n\n"
 		// "\0\s[0]\b2This is the second function menu intro.\n\n"
		// "\0\s[0]\b2This is the third function menu intro.\n\n"	
// }

Select.dosomething : all
{
 		FunctionMenuIntros	
		"\n[half]\_q\b2\0\s[2]'What can I do for you?'\n\n[half]*You ask Obie to...?*\n\n"
		//this line ^ calls one of the intros above. If you are using the extra intros, you can uncomment this line.
		//the -- splits the intros and the menu choices
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n"
		"\![*]\q[Check Email,MailCheck]\n"
		"\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n\n"
		
		"\![*]\q[Open SSP Preferences,sspconfig]\n"
		"\![*]\q[Bug report,bugreport]\n"
		"\![*]\q[Update,keroupdatecheck]\n"
		"\![*]\q[System Info,ChoiceSystemInformation]\n\n"
		
		"\![*]\q[Test variable,testvariable]\n\n"
	//uncommment this ^^ When you are done with the test variable, 
	//aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, 
	//simply add two // slashes in front of "\![*]\q[Test variable,testvariable]\n\n" to comment the line out. 
	//In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.

		
 		"\![*]\q[Back to the Main Menu,BACKTOMENU]\e"
}


Select.CALENDAR
{
	"\0\s[0]'I'm opening the calender for you.'\w8\![open,calendar]\e"
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}


Select.sspconfig
{
	"\0\s[1]'Opening the SSP config menu for you.'\w8\![open,configurationdialog]\e"
}

Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	
	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. 
	//gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. 
	//They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]'I am checking the recycle bin.'\w8\w8\s[-1]\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\0\s[2]\c'It was empty all along.'\e" 
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[2]'Emptying the recycle bin.'\w8\0\s[1]'Be right back.'\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\0\s[2]\c'Done.'\e"
		
		"\0\s[2]'I'll be back in a second.'\w8\w8\s[-1]\w8\w8\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\0\s[5]\c'Finished.'\e"
	}
}

//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}


	
//---- OnChoiceTimeout ---------------------------------------------------------
//main menu timout dialogue
OnChoiceTimeout
 {
	"\0\s[6]*It lost interest.\e"
	"\0\s[5]*Looks like something else caught its attention...\e"
	"\0\s[6]*It looks like it got distracted by your task bar.\e"
 }

//This is when they select bug report. This is mostly meant to briefly give the user information about you, the creator, and how to report a problem to you. This can be handy if the person forgot where they got their ghost or how to contact you. Add whatever info you like here.
Select.bugreport
{
"\0\s[2]'Report bugs to mysticrakkoon@gmail.com \w5I was downloaded from \_a[http://www.whereveryoupostedthem.com/]some \_a.'\e"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\0\s[1]\![updatebymyself]\e"
}

//--Test Variable --------------------------------------------------------
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can!
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you, particularly if you have a bunch you want to change all at once.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!

Select.testvariable
{
	"\0\s[0]Testing!\e"
}




//this is just here incase I want to do something with this later

 
//---- Secondary Character Menu ---------------------------------------------------------
//KeroMenuIntros : nonoverlap
//{
//	"\1\s[10]\b[2]"
	
// 	--
	
//	"This is a menu introduction dialogue."
// 	"This is another menu introduction dialogue."
// 	"This is the third menu introduction dialogue."
//	"This is the fourth menu introduction dialogue."
//}

//OpenKeroMenu : all
//{
	 //this calls the intros above
//	KeroMenuIntros

	//this splits the intros from the menu options
//	--
	
	//these are the menu options
//	"\n\n[half]"
//	"\![*]\q[Update,keroupdatecheck]\n"
//	"\![*]\q[Bug report,bugreport]\n\n"
	
//	"\![*]\q[Test variable,testvariable]\n\n"
	//When you are done with the test variable, aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, simply add two // slashes in front of "\![*]\q[Test variable,testvariable]\n\n" to comment the line out. In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.
	
//	"\![*]\q[Nothing,keroCANCEL]\e"
//}

//There are no real set things for the second character to do, really. You can mostly add whatever functions you want to them, their menu is totally free reign. In mine for example, Hunter has some games, a pseudo-FAQ for users, a bug report, an update option, and most importantly, a test variable. A lot of that is fairly complicated though, so I won't get into it here. Advanced Users can pick up Hunter and Smoker and study their menu.dic to see how I did it though, and those who read the coding page of the walkthrough and want to make their own functions can feel free to add them here. 
//For the purposes of this simple template, I'll include two options that may come in handy - an update option and a bug report option, as well as the test variable.

//If you click cancel. Replace dialogue as you want.
//Select.keroCANCEL
//{
//	"\1\s[10]This is menu cancel dialogue.\e"
//}

