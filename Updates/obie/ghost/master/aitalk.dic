
/*
This file has...

AiTalk
RandomTalk
any chains you set up
HourCheck
OnMinuteChange
OnSecondChange
OffscreenTalk
EndOffscreenTalk
OnSurfaceRestore
OnKeyPress
*/


//--OnAiTalk
//Leave this alone. This is mostly setting up whether or not dialogue is in a chain before it displays.

OnAiTalk
 {
	if RAND(100) < communicateratio
 	{
 		StartCommunicate
	}
 	else
	{
			if CHAIN.IDName == "" {
 				lastTalk = RandomTalk
			}
			else {
				lastTalk = ChainTalk
			}
			lastTalk
	}
 }
 


//--Mikiretalk, or the Off-Screen Boundary Check------------------------------------------------------

//This has been a feature in the template for a very long time, and while it's enjoyable enough for some, 
//for others it can be rather irritating or goes against what their ghost is. So to that end, I'm making this an opt-in feature. 
//Basically, this flag checks to see if the ghost is off the screen and haves them say something to the user to get them to move them back on screen. 
//If you want to enable this, it'll take a bit of fussing around. You're going to want to add the mikireflag check into OnAiTalk above. You can see how so below. 
//Then you'll have to follow up on the flag check later down at OnSecondChange. Keep an eye out.

 
//
// OnAiTalk
 // {
	// if RAND(100) < communicateratio
 	// {
 		// StartCommunicate
	// }
 	// else
	// {
 		// if mikireflag == 0
		// {
			// if CHAIN.IDName == "" {
 				// lastTalk = RandomTalk
			// }
			// else {
				// lastTalk = ChainTalk
			// }
			// lastTalk
		// }
 		// else
		// { 
		// MikireTalk
 		// }
	// }
 // }
//***********************************************************************


//--RandomTalk 
 //Alright, here we go! This is where ALL your ghost's random dialogue will go! 
 //These are the conversations that they'll have with you or each other that pop up depending on the talk rate defined in menu.dic (or if you ignored that, set in bootend.dic in the first boot, which would be every five minutes).
 
 
//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. 
//Also for my own reference in the future since I plan on using this template too, haha. 
//If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//You CAN link to other pools of dialogue in RandomTalk using envelopes/functions, 
//such as %(teatalk) to pull from a pool of dialogue about tea. Then you'd just add that line in among the other dialogue in here with %(teatalk).

//You can't do things like put OnSystemBoot or something in RandomTalk. 
//You could use \![raise] to pull something though, although I'd be careful about it. More on these kind of things and conditionals in general in the coding page on the walkthrough.

//If you split up RandomTalk with if/else checks, then you can redirect in an If to another function, like... if chargermode == "on" { ChargerChatting } else {normal random talk dialogue}. 
//This would redirect the random dialogue to ChargerChatting instead. You can't just throw a function into RandomTalk directly though, like "dialogue 1" "dialogue 2" OnFunctionname "dialogue 3", 
//that kind of thing. You'll have to split it off into its own if or point to it with an envelope.

//You can do multiple ifs in RandomTalk if required... like an if for if a character is asleep, or if a third character is present, or if they're having a nervous breakdown, or if they're sulking. 
//It depends! You can add a bunch of checks leading to specialized pools if you want. 
//Just make sure you leave some normal dialogue in the last else for RandomTalk (unless you want to redirect that somewhere else with an envelope too... although that seems a bit redundant, honestly.)
//***********************************************************************


//nonoverlap_pool should make it so all your dialogue has an equal probability of being called, and it will do each line of dialogue before repeating them. "Why" is kind of technical and a bit outside the scope of this template, you can look into why elsewhere if you want.

RandomTalk : nonoverlap_pool
{	
	"\0\s[1]'This seems like an interesting place.'\e"
	"\0\s[2]'There are a lot of places I used to frequent besides here.\w2 I have been %(obielocations).'\e"
	"\0\s[11]'You're kind to spirit me away for a little break, human.'\w5\n\n[half]'We all can use a break sometimes.'\e"
	"\0\s[2]\s[12]* It's humming a tune.'\e"
	"\0\s[0]* (Is it watching you...?) \n\w5* (It's hard to tell...)\w8\i[2]\w8\n\n[half]* (Oop yes it was!)\e"
	"\0\s[1]* It doesn't say anything, the silence must not bother it.\e"
	"\0\s[1]'I wonder what offerings those humans have left for me.'\n\n[half]\w8\s[6]'Hopefully something tasty.'\e"
	"\0\s[2]\i[24]\i[24]\i[24]\e"
	"\0\s[5]'I wonder if %(offeringitems) is still at my cliff.'\e"
	"\0\s[5]'I have been here for %(passmin) minutes.'\e"
	"\0\s[2]\i[22]\w8\w8\w8\w8\w8* (Is it trying to watch and learn from you?)"
	"\0\s[5]* It looks like it is looking through something...\w8\w8\s[2]\i[22]\w8\n\n[half]'So many interesting folders you have there.'"
	"\0\s[2]\w8\w8\w8\w6\s[1]\i[12]\w8\w8'I can see your folders....'\n\n[half]\w8\w8\w8\w8\w6'I wonder what's in there....'\s[2]\w8\w8\w6\n\n[half]'...Anything in there for me maybe?'"
	"\0\s[2]'Your folders look tasty...\w4\w2 Can I eat one?"
	"\0\s[2]\s[6]'The %(usersfolder) looks especially tasty\w6.\w6.\w6.\w6.'\n\n[half]'May I?'"
	"\0\s[2]'I have been here for %(passmin) minutes.'"
//	"\0\s[0]\i[5]\s[1]\s[4]\i[41]\s[3]\1[31]* (It seems to be exploring your monitor...?)" -trying to get it to move randomly - need to see if there is a better way to get this to work.
		//this is turning to \s[1] and then moving to the right, turning and then moving to the left back to default position.
	
	
	//"\1\s[10]Here is dialogue referring to Anchor 1.\w8\0\s[0]Here is dialogue referring to Anchor 2 and Anchor 3.\e"
	//Anchor words are defined more in anchor.dic. Note here when you see this dialogue that Anchor 1, 2, and 3 become links when spoken, even if they weren't written as links in the dialogue in this file. This is why anchor words are convenient, you don't have to set up link code every time they say a certain word. Try clicking the links when they appear to see what they lead to. It'll give you an idea of exactly how anchors work.
	
	
	//--Chains
	//Chain dialogue is unique. A dialogue chain consists of multiple bits of dialogue that get called in order over a period of time.
	
	//"\0\s[0]This is the first part of a chained dialogue.\w8\1\s[10]Second part to come when we next speak.\e:chain=achain"
	//Note here that instead of ending the dialogue with the normal end tag of \e, it ends with \e:chain=achain. This will link down below to a chunk of code outside RandomTalk called achain. 
	//You can scroll down and find it now if you want. You can name your chain anything you want, it'd just follow the same format of \e:chain=yourchainsname. 
	//Once a dialogue has entered a chain, they won't say any other random dialogue until the chain is finished.
	
	//"\0\s[0]This will lead to the second piece of chained dialogue.\w8\1\s[10]This will have another chain attached to it.\e:chain=anotherchain"
	//Here, this will link to a different chain to continue the conversation. You can scroll down to the section on chains to see this in action.
	
	
//--If statements----------------------------------------------------------------------------------------------------------------------------------------------------

	//different shells --------------------------------------------------------------------------------------------------------------------------------------------------
	if nowshell == "master" //This checks to see what shell they're currently using. You may remember this value being defined back in bootend.dic
	{
	//if they are in the default shell this will play
	"\0\s[0]'I remember when I used to get painted or drawn on by humans.\w4\n'I think it was because of a holiday or ritual? \w6...Not sure for certain though.' \e"
	}
	
	//You can also put in multiple ifs checking for the same thing to vary the responses. In this case, it's checking to see if they're wearing another shell. You don't need to use elseifs for this! Just an if is fine.
	if nowshell == "Hypothetical Shell that doesn't actually exist"
	{
	"\0\s[0]This is dialogue related to a shell we don't actually have.\w8\s[18]Unless it somehow pops into existence.\e"
	}
	
	//month/day/time dialouge-------------------------------------------------------------------------------------------------------------------------
	
	if seasonslot == "winter" //winter dialogue
	{
		"\0\s[0]'I remember when the winds, blizzards and the cold would get at me around this time of year.'\n\n[half]\s[2]'I am glad I get a little break from that.'\e"
		"\0\s[2]'I don't quite feel the cold in the same way as you,\w4 %(username).\w8\s[2]\n\n[half]'Make sure you bundle up.'\s[1]\e"
		"\0\s[2]\i[25]\w8\w8\w8\w8\w8\w8'It's winter now over there isnt it?'\w8\w8\w8\n\n[half]* It says something under its breath - \n'Make sure to not get sick human.'\e"
	}
	
	if seasonslot == "fall" //fall dialogue
	{
		"\0\s[2]'I don't quite feel the chill in the air as you,\w4 %(username).\w8\s[2]\n\n[half]'Make sure you bundle up a little.'\s[1]\e"
	}
	
	if seasonslot == "summer" //summer dialogue
	{
		"\0\s[2]'I don't quite feel the heat in the same way as you,\w4 %(username).\w8\s[2]\n\n[half]'Make sure you drink lots of water and wear sunscreen.\w4 You might need it.'\s[1]\e"
		"\0\s[2]'I wonder what summer is like for you,\w3 through this screen.'\e"
	}
	
	if seasonslot == "spring" //spring dialogue
	{
		"\0\s[2]'I don't quite feel the cold in the same way as you,\w4 %(username).\w8\s[2]\n\n[half]'Make sure you bundle up.'\s[1]\e"
	}
	
	if month >= 12 //december 
	{
		"\0\s[2]\i[25]'It's winter now over there isnt it?'\w8\w8\w8\n\n[half]* It says something under its breath - \n'Make sure to not get sick human.'\e"
	}
	
	
	if weekday == 1 //monday
	{
		"\0\s[1]'I overheard that you humans do not like the first day of the week,\w4\s[2] is that true?'\e"
	}
	
	if timeslot == "earlymorning" //between the time 5 am to 8 am
	{
		"\0\s[5]'I wonder if your world has sunrises too\w1.\w1.\w1.\w1.'\e"
		"\0\s[0]\s[2]'.\w4.\w4.\w4\w8Why are you awake?'\e"
	}
	
	if timeslot == "evening" //between the time 18 to 20 
	{
		"\0\s[5]'I wonder if your world has sunsets too\w1.\w1.\w1.\w1.'\e"
		"\0\s[1]'I wish I could see the sunset back where I was at.'\e"
	}
	
//--Double Envelopes-----------------------------------------------------------------------------------------------------------------------------------
	//If you've gone through word.dic, you may remember a list with two sets of values on each line. This is how you would call something like that! 
	//Technically, what I call a double envelope is really an array, or a stored list of values. 
	//You can pull certain things out of that list as you need, although it requires some specific formatting. 
	//For this example, we'll use the double envelope that cindysuke made that has a Korean word and its definition. This can be a bit complicated, so pay close attention.	
	//note that this is enclosed in its own set of brackets
	//{
	//_korean = lessonkor //Here, the envelope "lessonkor" (which is in word.dic) is stored as a new temporary value called _korean. You can name the new value anything you like. As a reminder, when coding, it goes "4 = 2 + 2" and not "2 + 2 = 4". The result always comes first!
	//If you look at lessonkor in word.dic, you'll see it goes "Korean word, meaning". So "Korean word" is the first value in that array, and "meaning" is the second. Arrays always start at 0, as a note.
	//_korword = _korean[0] //Now we make a temporary value called "_korword", which is what will store the Korean word. Since the Korean word is the first value in the array _korean which we just defined, then we can pull that value from the array with _korean[0]. [0] is telling it which entry in the array to take - in this case, the first one (again, arrays start at 0).
	//_kormean = _korean[1] //Now we make a temporary value called "_kormean", which is what will store the meaning of the Korean word. This is the second value in the array, so we can pull it out of _korean by using _korean[1].
	
	//Now we put it all together!
	//"\1\s[10]Here is an example of a double envelope. The Korean word is %(_korword).\w8\0\s[0]The word means %(_kormean).\e"
	
	//As you can see here, we then use the values we set above for _korword and _kormean up there in the dialogue as our new envelopes. If you're planning on using a double envelope/array like this, study how this works very carefully! If you're good with arrays, you can do a lot with this kind of thing, but I must admit I am terrible with arrays and they're still hard for me to wrap my head around, so I don't have much advice on how to do that kind of thing.
	//The underscores in front of korword and kormean mean that the value is temporary, and will disappear when the dialogue has finished. More on this kind of thing on the coding page of the walkthrough.
	
	//Additional Note - You can't test this kind of dialogue in Script Input. You'll have to wait until it comes up naturally in your ghost's random dialogue.
	//}
	//That's all for double envelopes! As mentioned, if this scares you, you can delete this chunk and you'll be fine.
	
	
//--Multiple Responses-----------------------------------------------------------------------------------------------------------------------------------------------------
	//If you've poked around menu.dic or string.dic or read the walkthrough, you may have seen me touch on setting multiple options for any one given bit of dialogue. 
	//This kind of dialogue follows much the same format.
	
	//{ //Again, note the brackets around these unique bits of dialogue. Dialogue that's more complicated than just a single line of "dialogue/more dialogue/more dialogue/end" usually needs to be put in brackets like this. 
	
	//"\0\s[0]I am asking you a generic question, Triangle. Generic question?\w8\1\s[10]"
	//Notice that the last few tags set up Triangle's pose before going into his text below. You don't have to do this if you want each response to have its own pose, but if he'll have the same expression regardless of what he's saying, you might as well save yourself the work. Note this does not end with \e either, since the dialogue isn't done yet.
	//-- //You've probably seen these double dashes before in other .dic files. In this case, these dashes enclose a set of multiple responses. More on double dashes in the coding page on the walkthrough site.
	//"This is my first response."
	//"This is my second response."
	//"This is my third response."
	//"This is my fourth response."
	//"This is my fifth response."
	//"This is my sixth response."
	//As you can see here, there are six potential replies Triangle might have to Girl's question. Each time this dialogue is called, he will randomly select one response from these six.
	//-- //The closing set of dashes for his dialogue options.
	//"\w8\0\s[0]\n\n[half]" //Now we're going back to Girl to set up for her multiple responses in return. This line of tags mostly just sets up for what she will say. Like above, you can see her pose is set in here with \s[0], so she'll have the same pose for each response, and the consistent spacing with \n\n[half].
	//-- //opening dashes
	//"First response to your response."
	//"Second response to your response."
	//"Third response to your response."
	//"Fourth response to your response."
	//Following the same pattern as above, Girl will randomly reply with one of these bits of dialogue. Note that these responses are also randomly chosen, so it may go Triangle says response one, Girl says response three, or Triangle says response four, Girl says response two, or so on and so forth. So make sure the exchange will still make sense regardless of what either of them might say.
	//-- //closing dashes
	//"\e" //Dialogue ends
	//}
	
	//Here's another example of multiple responses. This one will let you randomly choose something to say in the middle of a sentence.
	
	//{
	//"\0\s[0]Say either black or white.\w8\1\s[10]What if I say " 
	-- //opening dashes
	//"green"
	//"red"
	//"purple"
	//"orange"
	//"yellow"
	//"\s[18]magenta" //Notice here I added a tag for his thoughtful pose. If he chooses magenta, he'll do this pose. You can set up individual expressions for each potential choice this way.
	//-- //closing dashes
	//" instead?\w8\0\n\n[half]\s[9]Then you're not really cooperating.\w8\1\n\n[half]\s[15]Sounds about right.\e" //dialogue ends
	
	//You can see that this follows the formula of the above, although there's only one set of multiple responses in here, then Triangle continues with his sentence. You can use this feature in many different ways if you're creative.
	//}
	
	//"\0\s[0]\f[height,20]These words are really large.\f[height,default]\w8\1\s[10]These words are a normal size. \w8\f[height,6]These words are small.\f[height,default]\e"
	
	//You can use other fancier SakuraScript bits in your dialogue if you want to get font effects, although I won't get too much into them here. In this case, \f[height,20] changes the height of the font, in this case to 20 or to 6, and then \f[height,default] changes them back to normal. I touch more on this in the SakuraScript page of the walkthrough.
	
	//"\0\s[0]\f[strike,true]These words are struck out.\f[strike,default]\w8\1\s[10]\f[sub,true]These words are a subscript.\f[sub,false] \f[sup,true]These words are a superscript.\f[sup,false] \f[underline,true]These words are underlined.\f[underline,default] \f[bold,true]These words are bold.\f[bold,false] \f[italic,true]These words are italic.\f[italic,false] \f[color,186,146,112]These words are a color.\f[color,default] This tag would return to default.\f[default]\e"
	
	//Here's a list of similar tags you may find useful. You can see they function much like <b> or <i> tags in html. You just enclose the piece of text you want to change with them. Note that they start with \f[word,true] to turn it on, then \f[word,false] or \f[word,default] to turn it off. I assume you can tell what the tags do by the text they enclose.
	//For the \f[color] tag, the three colors listed are the RGB values of the color you want to use for your text. Change them to whatever color you want to use. \f[default] can be an easy way to quickly go back to the default word setting in your balloon after messing with colors and effects a lot.
	
	//"\0\s[0]Here's a link to a website. \_a[http://www.website.com/]Right here.\_a\e"
	//Along the same lines as above, you can use \_a[address] to link to certain things. Note that it ends with \_a to close the link. It's very similar to <a href=address> and </a> in html.
	
	//"\0\s[3]\1\s[15]\_sWe are saying this dialogue at the same time.\e" 
	//This dialogue uses a unique tag, \_s. \_s makes it so both characters will speak the same words at the same time. Try it in Script Input to see how it works. I talk about it a little more on the walkthrough page for scripting.
	
}//end of randomtalk


//--Chains------------------------------------------------------------------------------------------------------------------------------------------------------
//Here is where you will put your bits of chain dialogue. They are outside of OnAiTalk, which makes them a bit more flexible as I mentioned above.
//Each chain function will go through each part of the chain in order even if it's in one function, until it goes to \e:chain=end which will end the chain, as you could probably guess. So you can put the entire chain dialogue into one place.
//You don't have to make chains if you don't want to! This is just for reference if you ever have a conversation come up where it could be handy.

//achain
//{{CHAIN
	//this will happen the first time the chain is called
//	"\0\s[0]Here is the second part of the chain.\w8\1\s[10]Will there be more?\e"
	
	//they will then go to this dialogue next
//	"\0\s[0]This is the third part of chained dialogue.\1\w8\s[10]This will lead to a fourth part.\e"
	
	//this will be the last piece of dialogue in the chain, then they will go back to their normal dialogue
//	"\0\s[0]This is the fourth piece of chained dialogue.\1\w8\s[10]This is the end.\e:chain=end"
//}}CHAIN

//Pay careful attention to the CHAIN text and double brackets for these. Double brackets, CHAIN, dialogue, double brackets, CHAIN. If you are planning on making chains, I'd recommend just copying and pasting the chain example here and changing the dialogue and name of the function as you need. Less likely for mistakes to happen, you know?
//Note also it ends with \e:chain=end, basically ending the chain.

//anotherchain
//{{CHAIN
//	"\0\s[0]This is the second example of chained dialogue.\1\w8\s[10]This will only have two parts.\e"
//	
//	"\0\s[0]This is the last piece of the second example of chained dialogue\1\w8\s[10]This will end here.\e:chain=end"
//}}CHAIN

//You can make chains as long or as shot as you want! Just make sure to end the chain when you're done.





//-OnMinuteChange-------------------------------------------------------------------------------------------------------------------------------------------------
//These are time-related bits of dialogue for your ghost to say. If any of them look interesting, uncomment them! 
//I commented them out for simplicity's sake, but it's up to you if you want to use them or not!

//OnMinuteChange
//{
//HourCheck
//--
//if mikireflag == 1
// 	{
// 		MikireTalk
//	}
//}


//Keeps track of if an hour has passed. Just ignore this.
HourCheck
{
if passmin >= 59
	{
		passmin = 0
		passhour = passhour + 1
	}
}


OnMinuteChange //This is what will trigger time-based dialogue for your Ghost.
 {
	HourCheck //checks to see if an hour has passed, ignore it
	--
 	 if minute == 0 //These ifs will check what time it is. Here, it's seeing if the minute equals zero...
	 {
 		 if hour == 12 //And the hour equals 12, meaning it's noon. You can change this to some other hour if you want.
		 {
 			 "\0\s[0]'It's noon.'\e"
		 }
 		 elseif hour == 0 
		 {
 			 "\0\s[0]\i[5]\s[1]'It's midnight.'\e"
 			 "\0\s[2]'I believe that it is 12 AM for you now.'\n\n'You should get some sleep at some point.'\e"
		 }
		 else
		 {
			 "\0\s[0]It's %(hour12) o'clock.\e"
			 //%(hour12) stores the time. This is a general top of the hour notification. 
		 }
	 }
	 //checking for a specific time
	 elseif hour == 5 && minute == 55 //this checks to see if the hour is 23 and the minutes are at 55... essentially, 11:55 pm.
	 {
		 "\0\s[2]'It is 5 minutes to it being 5 in the morning.'\w8\w6\n\n[half]'Go get some sleep and get me back to my alter and cliff.'\e"
	 }
	 elseif hour == 7 && minute == 30 && weekday == 2 
	 {			
		 "\0\s[11]'It's 7:30 on Tuesday.'\e"
	 }
	 
	
	//Advanced users who want to enable the off-screen boundary check = Remember mikireflag up in OnAiTalk? This is the flag that checks for that. You'll want to uncomment this here so it can trigger the dialogue.
	
	//Don't touch this part.
	 elseif mikireflag == 1
 	 {
 		 MikireTalk
	 }
 }

//--OnSecondChange
//Like the above, this handles what happens every time a second goes by. Most of this you will not have to touch.

OnSecondChange
 {
	if passsec == 59
 		{
	 	passsec = 0
 		passmin = passmin + 1
		}
 	else
 		{
	 	passsec = passsec + 1
		}
		
		
	//Advanced users - these next bits are related to the mikireflag and when a character is off screen. Uncomment these if you want to use this feature. 
		
	// if mikireflag == 0 && reference1 == 1 //Dialogue for putting them off the screen. You could make this a unique line if you wanted (Like "Hey! What are you doing?"), 
	//and have MikireTalk below be for if they continue to be offscreen ("Why are you leaving me out here? Help!" for example). 
	//I'll add an example bit of dialogue and comment it out, you can uncomment it and use it if you like, or just leave it out and use MikireTalk below.
	// {
		// //"\0\s[0]You've moved me off screen."
		
		// MikireTalk
	// }
	// if mikireflag == 1 && reference1 == 0 //Dialogue for coming back on the screen
	// {
		// EndMikireTalk
	// }
	// mikireflag = reference1 //reference1 is if the ghost is offscreen or not
	
	
	//This dialogue is for when the two characters are overlapping each other. Uncomment this if you want to have dialogue for it!
	
	// if reference2 == 1
	// {
 		// "\0\s[0]Me and Triangle are overlapping.\w8\1\s[19]That's strange since your resolution is %screenwidthx%screenheight, %(username). Shouldn't we have enough space?\4\e"
		
		// //You can see here the use of two envelopes, screenwidth and screenheight, to tell the user their resolution. Oddly, they are not in parentheses. I'm not sure why this is, but they don't display right otherwise. An odd quirk with these two envelopes.
		// //Note also how Triangle moves away at the end of the dialogue. This is due to the \4 tag. That will make any one character move away from the other if they are able. I talked about this tag and its counterpart tag \5 in the SakuraScript page on the walkthrough.
	// }
 }

 //---- MikireTalk ---------------------------------------------------------------------
 //MikireTalk is dialogue for when your main character is off-screen. Like if you dragged Girl over to the side of your monitor until she was partially concealed by it. 
 //Advanced users, make sure to uncomment this along with all the other mikire related things in here I've pointed out.
 
// MikireTalk
 // {
	// "\0\s[0]I'm off the screen.\w8\1\s[10]You can push Ctrl-Shift-F12 to bring her back."
	// //Note the hotkey combo Triangle mentions. He's telling the truth, that should bring her back on the screen.
 // }

 //----EndMikireTalk--------------------------------------------------------------------
 //For after you bring the character back on screen.
 
// EndMikireTalk
 // {
	// "\0\s[0]I'm no longer off the screen.\w8\1\s[19]What a shame.\w8\0\s[9]\n\n[half]Shut up.\e"
 // }


//**** OnSurfaceRestore *****************************************************************
//OnSurfaceRestore is a handy function. What this does is that after a short period of time, the ghost will go back to its default pose, so you won't have a ghost stuck in one expression for too long. 
//It's also helpful if you've made one of the characters disappear using \s[-1] in dialogue and didn't bring them back at the end of it. This will do that for you.
//I'm going to comment out the if/else statements in this because the circumstances in which they'd come up seem pretty unlikely and unnecessary 

//*********************Advanced User Info*******************************
//You can put if statements in OnSurfaceRestore to make exceptions for certain poses, or to make sure that once they're in a certain pose, they stay in that pose. For example, if you turn my Hunter and Smoker ghost into eggplants, there's a check for the their eggplant pose numbers to make sure they STAY eggplants when OnSurfaceRestore is called.
//You can also use OnSurfaceRestore to clean up things that might be left on the screen, primarily from using p[number]\s[] to call up other objects or characters. Just make sure to add a p[number]\s[-1] to OnSurfaceRestore, and that should get rid of it each time the ghost cleans itself up.
//***********************************************************************

OnSurfaceRestore 
 {
 	if reference0 == 7 || reference0 == 8 || reference0 == 9
	{
 	"\0* Obie breathes in...\s[7]\w8\w8\w8\w8\w8\w8\n\n[half]* And breathes out...\s[2]\s[0]\e"
 	}
 	elseif reference0 == 1
 	{
 	"\0\s[1]\i[15]\s[0]"
 	}
 	else
 	{
	"\0\s[0]\1\s[10]\e"
	}
	//LINE 478 - This is checking what poses they are in. This looks to see if obie is in pose 4 or pose 6, since she is reference0.
	//LINE 482 - This is doing the same but for Triangle, since he's reference1. It looks to see if he's in pose 14 or post 16.
 }

 
 //--OnKeyPress
 //This defines the hotkeys your ghost will use. You can change these to whatever you want, but I don't really know why you would. 
 //I'd just leave this alone. Advanced Users can add new hotkeys attached to whatever function if you want.
 
OnKeyPress
{
	if reference0 == "t"
	{
	OnAiTalk
	}
	elseif reference0 == "r"
	{
	OnLastTalk
	}
	elseif reference0 == "f1"
	{
	"\![open,readme]"
	}
}